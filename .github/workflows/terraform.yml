# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform Provisioning'
on: [push]

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'us-east-1'

    - name: Terraform init
      if: "contains(github.event.commits[0].message, 'tf')"
      run: |
        terraform init -input=false
        terraform validate

    - name: Terraform apply dev
      if: "contains(github.event.commits[0].message, 'apply dev')"
      run: |
        terraform workspace new dev || true
        terraform workspace select dev
        terraform apply -auto-approve -input=false

    - name: Terraform apply prod
      if: "contains(github.event.commits[0].message, 'apply prod')" 
      run: |
        terraform workspace new prod || true
        terraform workspace select prod
        terraform apply -auto-approve -input=false

    - name: Terraform destroy dev
      if: "contains(github.event.commits[0].message, 'destroy dev')"
      run: |
        terraform workspace select dev
        terraform refresh
        terraform destroy -auto-approve -input=false

    - name: Terraform destroy prod
      if: "contains(github.event.commits[0].message, 'destroy prod')" 
      run: |
        terraform workspace select prod
        terraform destroy -auto-approve -input=false
    
    - name: Terraform rm state dev
      if: "contains(github.event.commits[0].message, 'state rm dev')" 
      run: |
        terraform workspace select dev
        COMMAND=terraform" "$(echo ${{ github.event.commits[0].message }} | cut -d " " -f2,3,6)
        $COMMAND
    - name: Terraform rm state prod
      if: "contains(github.event.commits[0].message, 'state rm prod')" 
      run: |
        terraform workspace select prod
        COMMAND=terraform" "$(echo ${{ github.event.commits[0].message }} | cut -d " " -f2,3,6)
        $COMMAND

    - name: setup git config
      run: |
        # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
        git config user.name "furlanrb"
        git config user.email "furlanrb@gmail.com"

    - name: commit
      run: |
        # Stage the file, commit and push
        git add .
        git commit -m $GITHUB_RUN_NUMBER || true
        git push origin main
